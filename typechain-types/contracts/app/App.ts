/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface AppInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getPaywallStatus"
      | "initialize"
      | "paused"
      | "setPaused"
      | "unlockPaywall"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Initialized"
      | "Paused"
      | "UnlockPaywall"
      | "UnlockPaywallTransfer"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getPaywallStatus",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "setPaused", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "unlockPaywall",
    values: [
      BytesLike,
      BytesLike,
      BytesLike,
      BigNumberish,
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getPaywallStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPaused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unlockPaywall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnlockPaywallEvent {
  export type InputTuple = [
    signer: AddressLike,
    consumer: AddressLike,
    invoiceID: BigNumberish
  ];
  export type OutputTuple = [
    signer: string,
    consumer: string,
    invoiceID: bigint
  ];
  export interface OutputObject {
    signer: string;
    consumer: string;
    invoiceID: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnlockPaywallTransferEvent {
  export type InputTuple = [
    signer: AddressLike,
    from: AddressLike,
    to: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    invoiceID: BigNumberish,
    transferType: BigNumberish
  ];
  export type OutputTuple = [
    signer: string,
    from: string,
    to: string,
    token: string,
    amount: bigint,
    invoiceID: bigint,
    transferType: bigint
  ];
  export interface OutputObject {
    signer: string;
    from: string;
    to: string;
    token: string;
    amount: bigint;
    invoiceID: bigint;
    transferType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface App extends BaseContract {
  connect(runner?: ContractRunner | null): App;
  waitForDeployment(): Promise<this>;

  interface: AppInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getPaywallStatus: TypedContractMethod<
    [signer: AddressLike, postID: BigNumberish, consumer: AddressLike],
    [
      [boolean, bigint, bigint] & {
        isUnlocked: boolean;
        invoiceID: bigint;
        unlockedBlockNumber: bigint;
      }
    ],
    "view"
  >;

  initialize: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  setPaused: TypedContractMethod<[paused: boolean], [void], "nonpayable">;

  unlockPaywall: TypedContractMethod<
    [
      serverSignature: BytesLike,
      sellerTermsMessageHash: BytesLike,
      sellerTermsSignature: BytesLike,
      consumerTermsVersion: BigNumberish,
      affiliateTermsMessageHash: BytesLike,
      affiliateTermsSignature: BytesLike,
      invoiceID: BigNumberish,
      postID: BigNumberish,
      paymentToken: AddressLike,
      paymentAmount: BigNumberish,
      affiliateRatio: BigNumberish
    ],
    [void],
    "payable"
  >;

  withdraw: TypedContractMethod<
    [to: AddressLike, contractAddress: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getPaywallStatus"
  ): TypedContractMethod<
    [signer: AddressLike, postID: BigNumberish, consumer: AddressLike],
    [
      [boolean, bigint, bigint] & {
        isUnlocked: boolean;
        invoiceID: bigint;
        unlockedBlockNumber: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "setPaused"
  ): TypedContractMethod<[paused: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unlockPaywall"
  ): TypedContractMethod<
    [
      serverSignature: BytesLike,
      sellerTermsMessageHash: BytesLike,
      sellerTermsSignature: BytesLike,
      consumerTermsVersion: BigNumberish,
      affiliateTermsMessageHash: BytesLike,
      affiliateTermsSignature: BytesLike,
      invoiceID: BigNumberish,
      postID: BigNumberish,
      paymentToken: AddressLike,
      paymentAmount: BigNumberish,
      affiliateRatio: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [to: AddressLike, contractAddress: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "UnlockPaywall"
  ): TypedContractEvent<
    UnlockPaywallEvent.InputTuple,
    UnlockPaywallEvent.OutputTuple,
    UnlockPaywallEvent.OutputObject
  >;
  getEvent(
    key: "UnlockPaywallTransfer"
  ): TypedContractEvent<
    UnlockPaywallTransferEvent.InputTuple,
    UnlockPaywallTransferEvent.OutputTuple,
    UnlockPaywallTransferEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "UnlockPaywall(address,address,uint128)": TypedContractEvent<
      UnlockPaywallEvent.InputTuple,
      UnlockPaywallEvent.OutputTuple,
      UnlockPaywallEvent.OutputObject
    >;
    UnlockPaywall: TypedContractEvent<
      UnlockPaywallEvent.InputTuple,
      UnlockPaywallEvent.OutputTuple,
      UnlockPaywallEvent.OutputObject
    >;

    "UnlockPaywallTransfer(address,address,address,address,uint256,uint128,uint32)": TypedContractEvent<
      UnlockPaywallTransferEvent.InputTuple,
      UnlockPaywallTransferEvent.OutputTuple,
      UnlockPaywallTransferEvent.OutputObject
    >;
    UnlockPaywallTransfer: TypedContractEvent<
      UnlockPaywallTransferEvent.InputTuple,
      UnlockPaywallTransferEvent.OutputTuple,
      UnlockPaywallTransferEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
